{"uid":"dab73d8099b7e8e2","name":"test_create_user[test1-test1-test2212501@mail.com-200]","fullName":"DummyAPI.TestUser#test_create_user","historyId":"4406a901d2ecf2e0d7acc9064c5a253e","time":{"start":1681596775431,"stop":1681596775597,"duration":166},"status":"skipped","statusMessage":"XFAIL\n\nAssertionError: Неверный статус код. Получен 400 вместо 200\n  \nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <DummyAPI.TestUser object at 0x7f56d425fb20>, first_name = 'test1'\nlast_name = 'test1', email = 'test2212501@mail.com', status_code = 200\n\n    @pytest.mark.parametrize(\"first_name, last_name, email, status_code\",\n                             [(\"firstname\", \"lastname\", test_email, 200),\n                              pytest.param(\"test1\", \"test1\", test_email, 400, marks=pytest.mark.xfail),\n                              pytest.param(\"test1\", \"test1\", f\"test{time.strftime('%H%M%S1')}@mail.com\", 200,\n                                           marks=pytest.mark.xfail),\n                              pytest.param(\"\", \"test1\", f\"test{time.strftime('%H%M%S2')}@mail.com\", 400,\n                                           marks=pytest.mark.xfail),\n                              pytest.param(\"test1\", \"\", f\"test{time.strftime('%H%M%S3')}@mail.com\", 400,\n                                           marks=pytest.mark.xfail),\n                              pytest.param(\"test1\", \"test1\", \"\", 400, marks=pytest.mark.xfail),\n                              pytest.param(\"\", \"\", \"\", 400, marks=pytest.mark.xfail)])\n    @allure.step(\"user create\")\n    def test_create_user(self, first_name, last_name, email, status_code):\n        body = {\n            'firstName': f'{first_name}',\n            'lastName': f'{last_name}',\n            'email': f'{email}'\n        }\n        create_user_url = base_url + \"user/create\"\n        response = requests.post(create_user_url, headers=headers, data=body)\n        result = response.json()\n        user_id = result.get('id')\n>       Check.status_code(response, status_code)\n\nDummyAPI.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, status_code = 200\n\n    @staticmethod\n    def status_code(response: object, status_code: int):\n>       assert response.status_code == status_code, \\\n            f'Неверный статус код. Получен {response.status_code} вместо {status_code}\\n'\nE       AssertionError: Неверный статус код. Получен 400 вместо 200\nE         \nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nDummyAPI.py:18: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"skipped","statusMessage":"XFAIL\n\nAssertionError: Неверный статус код. Получен 400 вместо 200\n  \nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <DummyAPI.TestUser object at 0x7f56d425fb20>, first_name = 'test1'\nlast_name = 'test1', email = 'test2212501@mail.com', status_code = 200\n\n    @pytest.mark.parametrize(\"first_name, last_name, email, status_code\",\n                             [(\"firstname\", \"lastname\", test_email, 200),\n                              pytest.param(\"test1\", \"test1\", test_email, 400, marks=pytest.mark.xfail),\n                              pytest.param(\"test1\", \"test1\", f\"test{time.strftime('%H%M%S1')}@mail.com\", 200,\n                                           marks=pytest.mark.xfail),\n                              pytest.param(\"\", \"test1\", f\"test{time.strftime('%H%M%S2')}@mail.com\", 400,\n                                           marks=pytest.mark.xfail),\n                              pytest.param(\"test1\", \"\", f\"test{time.strftime('%H%M%S3')}@mail.com\", 400,\n                                           marks=pytest.mark.xfail),\n                              pytest.param(\"test1\", \"test1\", \"\", 400, marks=pytest.mark.xfail),\n                              pytest.param(\"\", \"\", \"\", 400, marks=pytest.mark.xfail)])\n    @allure.step(\"user create\")\n    def test_create_user(self, first_name, last_name, email, status_code):\n        body = {\n            'firstName': f'{first_name}',\n            'lastName': f'{last_name}',\n            'email': f'{email}'\n        }\n        create_user_url = base_url + \"user/create\"\n        response = requests.post(create_user_url, headers=headers, data=body)\n        result = response.json()\n        user_id = result.get('id')\n>       Check.status_code(response, status_code)\n\nDummyAPI.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, status_code = 200\n\n    @staticmethod\n    def status_code(response: object, status_code: int):\n>       assert response.status_code == status_code, \\\n            f'Неверный статус код. Получен {response.status_code} вместо {status_code}\\n'\nE       AssertionError: Неверный статус код. Получен 400 вместо 200\nE         \nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nDummyAPI.py:18: AssertionError","steps":[{"name":"user create","time":{"start":1681596775431,"stop":1681596775597,"duration":166},"status":"failed","statusMessage":"AssertionError: Неверный статус код. Получен 400 вместо 200\n  \nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/Python-API-testing/Python-API-testing/DummyAPI.py\", line 114, in test_create_user\n    Check.status_code(response, status_code)\n  File \"/home/runner/work/Python-API-testing/Python-API-testing/DummyAPI.py\", line 18, in status_code\n    assert response.status_code == status_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"first_name","value":"'test1'"},{"name":"last_name","value":"'test1'"},{"name":"email","value":"'test2212501@mail.com'"},{"name":"status_code","value":"200"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"@pytest.mark.xfail"},{"name":"suite","value":"DummyAPI"},{"name":"subSuite","value":"TestUser"},{"name":"host","value":"fv-az354-599"},{"name":"thread","value":"2339-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"DummyAPI"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"email","value":"'test2212501@mail.com'"},{"name":"first_name","value":"'test1'"},{"name":"last_name","value":"'test1'"},{"name":"status_code","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["@pytest.mark.xfail"]},"source":"dab73d8099b7e8e2.json","parameterValues":["'test2212501@mail.com'","'test1'","'test1'","200"]}