{"uid":"e17e04185e9d6f76","name":"test_edit_user[643b21620dfe53eee9d4825fbad---200]","fullName":"DummyAPI.TestUser#test_edit_user","historyId":"7459a0c9b296b42a2e53451746cedc1d","time":{"start":1681596777600,"stop":1681596777758,"duration":158},"status":"skipped","statusMessage":"XFAIL\n\nAssertionError: Неверный статус код. Получен 400 вместо 200\n  \nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"first_name = '', last_name = '', status_code = 200\nuser_id = '643b21620dfe53eee9d4825fbad'\n\n    @staticmethod\n    @pytest.mark.parametrize(\"first_name, last_name, status_code\",\n                             [(\"firstname_edit\", \"lastname_edit\", 200),\n                              (\"\", \"lastname_edit\", 200),\n                              (\"firstname_edit\", \"\", 200),\n                              (\"\", \"\", 200)])\n    @pytest.mark.parametrize(\"user_id\",\n                             [user_id,\n                              pytest.param(f\"{user_id}bad\", marks=pytest.mark.xfail)])\n    @allure.step(\"user edit\")\n    def test_edit_user(first_name, last_name, status_code, user_id):\n        body = {\n            'firstName': f'{first_name}',\n            'lastName': f'{last_name}'\n        }\n        edit_user_url = base_url + f\"user/{user_id}\"\n        response = requests.put(edit_user_url, headers=headers, data=body)\n>       Check.status_code(response, status_code)\n\nDummyAPI.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, status_code = 200\n\n    @staticmethod\n    def status_code(response: object, status_code: int):\n>       assert response.status_code == status_code, \\\n            f'Неверный статус код. Получен {response.status_code} вместо {status_code}\\n'\nE       AssertionError: Неверный статус код. Получен 400 вместо 200\nE         \nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nDummyAPI.py:18: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"skipped","statusMessage":"XFAIL\n\nAssertionError: Неверный статус код. Получен 400 вместо 200\n  \nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"first_name = '', last_name = '', status_code = 200\nuser_id = '643b21620dfe53eee9d4825fbad'\n\n    @staticmethod\n    @pytest.mark.parametrize(\"first_name, last_name, status_code\",\n                             [(\"firstname_edit\", \"lastname_edit\", 200),\n                              (\"\", \"lastname_edit\", 200),\n                              (\"firstname_edit\", \"\", 200),\n                              (\"\", \"\", 200)])\n    @pytest.mark.parametrize(\"user_id\",\n                             [user_id,\n                              pytest.param(f\"{user_id}bad\", marks=pytest.mark.xfail)])\n    @allure.step(\"user edit\")\n    def test_edit_user(first_name, last_name, status_code, user_id):\n        body = {\n            'firstName': f'{first_name}',\n            'lastName': f'{last_name}'\n        }\n        edit_user_url = base_url + f\"user/{user_id}\"\n        response = requests.put(edit_user_url, headers=headers, data=body)\n>       Check.status_code(response, status_code)\n\nDummyAPI.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, status_code = 200\n\n    @staticmethod\n    def status_code(response: object, status_code: int):\n>       assert response.status_code == status_code, \\\n            f'Неверный статус код. Получен {response.status_code} вместо {status_code}\\n'\nE       AssertionError: Неверный статус код. Получен 400 вместо 200\nE         \nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nDummyAPI.py:18: AssertionError","steps":[{"name":"user edit","time":{"start":1681596777600,"stop":1681596777757,"duration":157},"status":"failed","statusMessage":"AssertionError: Неверный статус код. Получен 400 вместо 200\n  \nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/Python-API-testing/Python-API-testing/DummyAPI.py\", line 136, in test_edit_user\n    Check.status_code(response, status_code)\n  File \"/home/runner/work/Python-API-testing/Python-API-testing/DummyAPI.py\", line 18, in status_code\n    assert response.status_code == status_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"first_name","value":"''"},{"name":"last_name","value":"''"},{"name":"status_code","value":"200"},{"name":"user_id","value":"'643b21620dfe53eee9d4825fbad'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"@pytest.mark.xfail"},{"name":"suite","value":"DummyAPI"},{"name":"subSuite","value":"TestUser"},{"name":"host","value":"fv-az354-599"},{"name":"thread","value":"2339-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"DummyAPI"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"first_name","value":"''"},{"name":"last_name","value":"''"},{"name":"status_code","value":"200"},{"name":"user_id","value":"'643b21620dfe53eee9d4825fbad'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["@pytest.mark.xfail"]},"source":"e17e04185e9d6f76.json","parameterValues":["''","''","200","'643b21620dfe53eee9d4825fbad'"]}